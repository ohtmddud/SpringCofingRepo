<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.5.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- 맵핑명을 변경할 수 있다. 귀찮음 방지 -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/images/**" location="/WEB-INF/static/images/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- ****** 일반 JSP를 만들어내는 ViewResolver 등록 ****** -->	
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value = "2" />
	</beans:bean>
	
	<!-- ****** Tiles 기반으로 화면을 만드는 ViewResolver 등록 ****** -->
		<!-- *** 1. Tiles 설정파일을 읽어서 작업 할 수 있도록 설정파일을 등록 *** -->
	<beans:bean id = "tilesConfig" class = "org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/**/*-tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
		<!-- *** 2. Tiles 기반으로 뷰를 만들 수 있도록 ViewResolver 를 등록 *** -->
	<beans:bean id = "tilesViewResolver" class = "org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass" value = "org.springframework.web.servlet.view.tiles3.TilesView" />
		<beans:property name="order" value = "1" />
	</beans:bean>
	
		<!-- ****** DB 관련 작업 등록 ****** -->
		<!-- 커넥션을 관리하는 객체를 등록 -->
		<!-- DriverManager 방식: 커넥션을 요청이 들어올때 마다 생성해서 넘겨주는 방식, 웹상에서 매우 느림 -->
<!-- 	<beans:bean id="ds" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
<!-- 		<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" /> -->
<!-- 		<beans:property name="url" value="jdbc:oracle:thin:@192.168.219.104:1521:xe" /> -->
<!-- 		<beans:property name="username" value="scott" /> -->
<!-- 		<beans:property name="password" value="tiger" />		 -->
<!-- 	</beans:bean> -->

		<!-- DataSource 방식: WAS 에 등록된 커넥션풀을 이용해서 작업하는 방식 -->
	<beans:bean id="ds" class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="jdbc/myspring" />
		<beans:property name="resourceRef" value="true" />
	</beans:bean>
	
		<!-- sql을 실행할 수 있도록 기능을 제공하는 클래스 -->
	<beans:bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:constructor-arg ref="ds" />
	</beans:bean>
	
	<!-- ****** Mybatis 연결 ****** -->
		<!-- *** Spring과 Mybatis 연결 클래스(Mybatis 에서 오라클을 연결) *** -->
	<beans:bean id="sqlSessionFactory" class = "org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref ="ds" />
		<beans:property name="configLocation" value ="/WEB-INF/spring/appServlet/mybatis-config.xml" />
	</beans:bean>
			
		<!-- *** Mybatis 의 핵심 클래스(sql 을 실행하기 위한 메소드를 제공) *** -->
	<beans:bean id="sqlSession" class = "org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref = "sqlSessionFactory" />	
	</beans:bean>
	
	<!-- *** MongoDB 설정하기 *** -->
	<mongo:mongo id="mongods" host="192.168.219.102" port="27017"/>
	<beans:bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<!-- 매개변수 2개 생성자 -->
		<beans:constructor-arg ref="mongods"/>
		<beans:constructor-arg name="databaseName" value="sample"/>
	</beans:bean>
		<!-- MongoDB 데이터가 저장 될 Repo Class 가 있는 위치를 정의 -->
	<mongo:repositories base-package="spring.data.mongodb.score"/>
	
	<!-- 인터셉터 -->
	<interceptors>
		<interceptor>
			<mapping path = "/**" />
			<exclude-mapping path="/login.do" />
			<exclude-mapping path="/index.do" />
			<exclude-mapping path="/board/list.do" />
			<beans:bean class = "com.multi.erp.etc.LoginInterceptor"/>
		</interceptor>
		
<!-- 		<interceptor> -->
<!-- 			<!-- <mapping path="/**"/> -->
<!-- 			<mapping path="/board/**" /> -->
<!-- 			<mapping path="/emp/mypage/myjob" /> -->
<!-- 			<exclude-mapping path="/board/download/**"/> -->
<!-- 			<beans:bean class="com.multi.erp.etc.TimeCheckInterceptor" /> -->
<!-- 		</interceptor> -->
	</interceptors>
	
		
	<!-- 파일 업로드 -->
	<beans:bean id = "multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="40000000" />
	</beans:bean>
	
	<!-- ****** 빈을 생성하기 위해 패키지 등록 ****** -->	
	<context:component-scan base-package="oh.sy.cfgRepo" />
	<context:component-scan base-package="com" />
	<context:component-scan base-package="mapper" />
	
	<!-- 스프링에서 트랜잭션을 관리하는 핵심 클래스를 빈으로 등록 -->
	<!-- 1. transactionManager 등록 -->
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="ds"/>
	</beans:bean>
	<!-- xml 로 트랜잭션을 처리 / Exception 이 발생하면 rollback 처리 하겠다 -->
	<!-- 2. Advice 등록 -->
	<tx:advice id="txadvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	<!-- 3. aop 처리 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.multi.erp.*.*Service*.*(..))" id="txpointcut"/>
		<aop:advisor advice-ref="txadvice" pointcut-ref="txpointcut"/>
	</aop:config>
	
	<!-- Spring AOP -->
	<!-- aop 작업을 수행하는 proxy가 자동으로 감지해서 aop 등록된 것을 확인하고 실행 될 수 있도록 처리-->
	<!-- namespaces 수정 -->
	<aop:aspectj-autoproxy/>
	
<!-- 선언적 트랜잭션 -->
	<!-- Advice 등록 및 AOP 처리는 좀 더 복잡한 것 처리 할 때 사용 한다 -->
	<!-- 원리 파악 및 프록시 패턴에 대해서 알아야 한다. -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
</beans:beans>
